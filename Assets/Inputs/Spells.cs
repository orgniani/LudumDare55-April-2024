//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/Spells.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Spells: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Spells()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Spells"",
    ""maps"": [
        {
            ""name"": ""SpellCast"",
            ""id"": ""3bd1b26c-fa76-477c-89e9-af8d0a39e432"",
            ""actions"": [
                {
                    ""name"": ""Hand"",
                    ""type"": ""Button"",
                    ""id"": ""a22924d2-44c7-4193-95b6-69c114cf3041"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Water"",
                    ""type"": ""Button"",
                    ""id"": ""99371449-a190-4787-a183-2c1f2de3b373"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Barrier"",
                    ""type"": ""Button"",
                    ""id"": ""5cf6e7be-2194-472a-a06f-f638035521cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""29ae76a9-20c5-4aad-8a52-74ab65ff309c"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Hand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""143e5baf-1739-4ca7-8bf5-aa7deb775113"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Hand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""437afda8-b051-4580-a3e5-cf678addd33a"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Water"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8dd3d51f-b19a-4e0a-876b-b610f7cb2a71"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Water"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""170b0515-c828-4262-86c4-29aa7478cb0a"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Barrier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6426342-629b-4dc2-b51c-2d290dcaeb42"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Barrier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": []
        }
    ]
}");
        // SpellCast
        m_SpellCast = asset.FindActionMap("SpellCast", throwIfNotFound: true);
        m_SpellCast_Hand = m_SpellCast.FindAction("Hand", throwIfNotFound: true);
        m_SpellCast_Water = m_SpellCast.FindAction("Water", throwIfNotFound: true);
        m_SpellCast_Barrier = m_SpellCast.FindAction("Barrier", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SpellCast
    private readonly InputActionMap m_SpellCast;
    private List<ISpellCastActions> m_SpellCastActionsCallbackInterfaces = new List<ISpellCastActions>();
    private readonly InputAction m_SpellCast_Hand;
    private readonly InputAction m_SpellCast_Water;
    private readonly InputAction m_SpellCast_Barrier;
    public struct SpellCastActions
    {
        private @Spells m_Wrapper;
        public SpellCastActions(@Spells wrapper) { m_Wrapper = wrapper; }
        public InputAction @Hand => m_Wrapper.m_SpellCast_Hand;
        public InputAction @Water => m_Wrapper.m_SpellCast_Water;
        public InputAction @Barrier => m_Wrapper.m_SpellCast_Barrier;
        public InputActionMap Get() { return m_Wrapper.m_SpellCast; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpellCastActions set) { return set.Get(); }
        public void AddCallbacks(ISpellCastActions instance)
        {
            if (instance == null || m_Wrapper.m_SpellCastActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpellCastActionsCallbackInterfaces.Add(instance);
            @Hand.started += instance.OnHand;
            @Hand.performed += instance.OnHand;
            @Hand.canceled += instance.OnHand;
            @Water.started += instance.OnWater;
            @Water.performed += instance.OnWater;
            @Water.canceled += instance.OnWater;
            @Barrier.started += instance.OnBarrier;
            @Barrier.performed += instance.OnBarrier;
            @Barrier.canceled += instance.OnBarrier;
        }

        private void UnregisterCallbacks(ISpellCastActions instance)
        {
            @Hand.started -= instance.OnHand;
            @Hand.performed -= instance.OnHand;
            @Hand.canceled -= instance.OnHand;
            @Water.started -= instance.OnWater;
            @Water.performed -= instance.OnWater;
            @Water.canceled -= instance.OnWater;
            @Barrier.started -= instance.OnBarrier;
            @Barrier.performed -= instance.OnBarrier;
            @Barrier.canceled -= instance.OnBarrier;
        }

        public void RemoveCallbacks(ISpellCastActions instance)
        {
            if (m_Wrapper.m_SpellCastActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISpellCastActions instance)
        {
            foreach (var item in m_Wrapper.m_SpellCastActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpellCastActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SpellCastActions @SpellCast => new SpellCastActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface ISpellCastActions
    {
        void OnHand(InputAction.CallbackContext context);
        void OnWater(InputAction.CallbackContext context);
        void OnBarrier(InputAction.CallbackContext context);
    }
}
